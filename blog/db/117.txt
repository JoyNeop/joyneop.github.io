<p>A few days ago, I started a new project named <a href="/everpage/" target="_blank">Everpage</a> temporarily, a simple public service which allows users publish documents written in Markdown (not totally operational yet). It is like Evernote but the users do not have to let the Evernote logo be there so distracting, and is like Pastebin but the users do not have to bear its (usually) ugly appearances. I am not (and probably will never be) good at backend development. Database management and server maintenance always make me mad.</p>
<p>Fortunately, <a href="https://parse.com/" target="_blank" rel="nofollow">Parse.com</a> gave me a way out, to bypass those brainfucking stuff when developing an app with backend.</p>
<p>As stated on its homepage and in API documentation, <em>Parse</em> provides cross-platform SDKs that allows developers focus on data handling and error catching without concerning network communications. For this project, it is JavaScript SDK. I just tell it what is needed in database (e.g. a raw document, by its unique ID); it returns that upon retrieved. I was exempted from implementing AJAX, anti-injection, parameterized queries, auto increment, etc.</p>
<p>For managing users, <em>Parse</em> has a mature user management system. So neither do I have to implement my own signing up, signing in, resetting password and cookie/session/token authentication. It is as easy as adding a few <code>onclick</code> event listeners to the buttons. There is a feature named ACL (Access Control List), which lets the backend determine if current user has access to a row in the database, and I do not have to know anything about how to verify the user. Just let the user retrieve the data in frontend code. If the user has no access to it, an error will be thrown out and the frontend code shall tell the user what was going wrong.</p>
<p>In addition, it has great extensibility. If Everpage goes popular in future, it shall be separated from the subdirectory of my personal website to an independent domain. <em>Parse</em> provides hosting that the web app can be migrated there painlessly. Furthermore, if new product requirements come up, it also allows more sophisticated routing with Express.js framework.</p>
<p>Having such painless a backend solution is wonderful. It saves life.</p>